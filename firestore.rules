rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Game sets can be read by any authenticated user.
    // Creation, deletion, and updates are restricted to the creator.
    // playCount can be incremented by any authenticated user.
    match /game-sets/{gameSetId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow delete: if request.auth != null && resource.data.creatorId == request.auth.uid;
      allow update: if request.auth != null && 
                      (resource.data.creatorId == request.auth.uid ||
                       (request.resource.data.playCount == resource.data.playCount + 1 &&
                        request.resource.data.keys().toSet().subtract(resource.data.keys().toSet()).size() == 0 &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['playCount'])));
    }

    // Game rooms can be read, created, and updated by any authenticated user.
    match /game-rooms/{roomId} {
      allow read, update, create: if request.auth != null;
      allow delete: if resource.data.hostId == request.auth.uid;
    }

    // Users collection rules:
    match /users/{userId} {
      // Allow read access for any authenticated user to check profiles, existence, etc.
      allow read: if request.auth != null;

      // Allow write access (create, update, delete) ONLY for the user themselves OR for the server (Admin SDK).
      // The server is identified by `request.auth == null`.
      // This allows the server action to update XP for all players, but prevents clients from modifying other users' data.
      allow write: if (request.auth != null && request.auth.uid == userId) || request.auth == null;

      // Allow any authenticated user to read the playedGameSets subcollection
      // to check if a user has already played a specific game set.
      match /playedGameSets/{gameSetId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid == userId;
      }

      // Allow any authenticated user to read the incorrect-answers subcollection.
      // But only the user themselves or the server can write to it.
      match /incorrect-answers/{answerId} {
        allow read: if request.auth != null;
        allow write: if (request.auth != null && request.auth.uid == userId) || request.auth == null;
      }
    }
  }
}
