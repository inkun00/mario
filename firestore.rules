rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isRoomHost(roomId) {
      return get(/databases/$(database)/documents/game-rooms/$(roomId)).data.hostId == request.auth.uid;
    }
    
    match /game-sets/{gameSetId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (resource.data.creatorId == request.auth.uid || request.resource.data.playCount == resource.data.playCount + 1);
      allow delete: if request.auth != null && resource.data.creatorId == request.auth.uid;
    }

    match /game-rooms/{roomId} {
      allow read, update, delete: if true;
      allow create: if request.auth != null;
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow update if user is owner OR if server is making the request OR if the user is a host of a room the target user is in.
      allow update: if (request.auth != null && request.auth.uid == userId) || request.auth == null || exists(/databases/$(database)/documents/game-rooms/);
      allow delete: if request.auth != null && request.auth.uid == userId;

      match /playedGameSets/{gameSetId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /incorrect-answers/{answerId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
  }
}
