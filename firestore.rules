rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Game sets can be read by anyone, but only created/updated by authenticated users.
    match /game-sets/{gameSetId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Allow authenticated users to update a game set if they are the creator,
      // or if they are only incrementing the playCount.
      allow update: if request.auth != null && 
                      (resource.data.creatorId == request.auth.uid ||
                       (request.resource.data.playCount == resource.data.playCount + 1 &&
                        diff(resource.data, request.resource.data).affectedKeys().hasOnly(['playCount'])));
      allow delete: if request.auth != null && resource.data.creatorId == request.auth.uid;
    }

    // Game rooms can be created by authenticated users.
    // They can be read or updated by anyone (for now, for simplicity).
    match /game-rooms/{roomId} {
      allow read, update, delete: if true;
      allow create: if request.auth != null;
    }

    // Users can only read/write their own data.
    match /users/{userId} {
      allow read, update, create, delete: if request.auth != null && request.auth.uid == userId;

      // Users can read/write their own subcollections.
      match /{subcollection}/{docId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
  }
}

// Helper function to check changed fields during an update.
function diff(before, after) {
  let changedKeys = [];
  for (let key in after) {
    if (!before.keys().hasAll([key]) || before[key] != after[key]) {
      changedKeys.push(key);
    }
  }
  for (let key in before) {
    if (!after.keys().hasAll([key])) {
      changedKeys.push(key);
    }
  }
  return {
    affectedKeys: function() {
      return {
        hasOnly: function(keys) {
          return changedKeys.size() == keys.size() && changedKeys.hasAll(keys);
        }
      };
    }
  };
}
