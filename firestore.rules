rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isServer() {
      // Requests from the Admin SDK have request.auth == null
      return request.auth == null;
    }

    match /game-sets/{gameSetId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
                      (resource.data.creatorId == request.auth.uid ||
                       (request.resource.data.playCount == resource.data.playCount + 1 &&
                        request.resource.data.keys().hasOnly(['playCount', 'title', 'description', 'grade', 'semester', 'subject', 'unit', 'isPublic', 'questions', 'creatorId', 'creatorNickname', 'createdAt'])));
      allow delete: if isOwner(resource.data.creatorId);
    }

    match /game-rooms/{roomId} {
      allow read, update: if true;
      allow create: if request.auth != null;
      allow delete: if true;
    }

    match /users/{userId} {
      // Allow authenticated users to read user documents (for checking existence).
      allow read: if request.auth != null;
      // Allow server to update anything (for XP), and clients to only update their own doc.
      allow update: if isServer() || isOwner(userId);
      // Only the user or server can create/delete their own document.
      allow create, delete: if isServer() || isOwner(userId);

      // Allow authenticated users to read subcollections (for checking played status).
      match /playedGameSets/{gameSetId} {
         allow read: if request.auth != null;
         // Only the user themselves (or server) can write to their own subcollection.
         allow write: if isServer() || isOwner(userId);
      }
      
      match /incorrect-answers/{answerId} {
         allow read, write: if isServer() || isOwner(userId);
      }
    }
  }
}
