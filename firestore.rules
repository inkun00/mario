
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is the owner of the document.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // GAME-SETS: Read-all, authenticated-write for creators.
    // Play count can be incremented by any authenticated user.
    match /game-sets/{gameSetId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
                      (resource.data.creatorId == request.auth.uid || 
                       (request.resource.data.playCount == resource.data.playCount + 1 &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['playCount'])));
      allow delete: if request.auth != null && resource.data.creatorId == request.auth.uid;
    }

    // GAME-ROOMS: Authenticated users can create. Read/update is open for game logic.
    match /game-rooms/{roomId} {
      allow read, update, delete: if true;
      allow create: if request.auth != null;
    }

    // USERS:
    // Read: Any authenticated user can read other user profiles (for searching players).
    // Create/Update/Delete: A user can only write to their own document, OR the server (Admin SDK) can write to any user document.
    // The server is identified by `request.auth == null`.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isOwner(userId) || request.auth == null;

      // PLAYED-GAMESETS & INCORRECT-ANSWERS Subcollections:
      // Read: Any authenticated user can read to check if another player has played a set.
      // Write: Only the user themselves or the server can write to these subcollections.
      match /{subcollection}/{docId} {
        allow read: if request.auth != null;
        allow write: if isOwner(userId) || request.auth == null;
      }
    }
  }
}
