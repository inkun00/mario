
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Function to check if the requester is the host of a specific game room.
    // This function expects the gameRoomId to be passed in the written data.
    function isHostOfGame(gameRoomId) {
      return request.auth != null && get(/databases/$(database)/documents/game-rooms/$(gameRoomId)).data.hostId == request.auth.uid;
    }

    // Game sets can be read by anyone, but only created/updated by authenticated users.
    match /game-sets/{gameSetId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Allow update if the user is the creator OR if they are only incrementing playCount.
      allow update: if request.auth != null && (
                      resource.data.creatorId == request.auth.uid ||
                      (request.resource.data.playCount == resource.data.playCount + 1 &&
                       request.resource.data.keys().hasOnly(['playCount']))
                    );
      allow delete: if request.auth != null && resource.data.creatorId == request.auth.uid;
    }

    // Game rooms can be read/updated by any authenticated user.
    match /game-rooms/{roomId} {
      allow read, update: if request.auth != null;
      allow create: if request.auth != null;
      allow delete: if request.auth != null && resource.data.hostId == request.auth.uid;
    }

    // Rules for the users collection
    match /users/{userId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;

      // Allow update if the user is updating their own document,
      // OR if the request is coming from the server (for admin tasks),
      // OR if the requester is a host updating ONLY the 'xp' field of a player in their game.
      allow update: if isOwner(userId) || request.auth == null || 
                      (isHostOfGame(request.resource.data.gameRoomId) && 
                      request.resource.data.keys().hasAll(['xp']) && 
                      !request.resource.data.keys().hasAny(['email', 'displayName', 'level', 'schoolName']));
                      
      allow delete: if isOwner(userId);

      // Users can read anyone's playedGameSets to check for duplicates.
      // But they can only write to their own.
      match /playedGameSets/{docId} {
        allow read: if request.auth != null;
        allow write: if isOwner(userId);
      }
      
      // Users can only manage their own incorrect answers.
      match /incorrect-answers/{docId} {
        allow read, write, delete: if isOwner(userId);
      }
    }
  }
}
