rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Helper function to check if the requester is the host of a given game room.
    function isRoomHost(roomId) {
      let room = get(/databases/$(database)/documents/game-rooms/$(roomId)).data;
      return request.auth != null && room.hostId == request.auth.uid;
    }

    match /game-sets/{gameSetId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null &&
                      (resource.data.creatorId == request.auth.uid ||
                       (request.resource.data.size() == resource.data.size() + 1 &&
                        request.resource.data.playCount == resource.data.playCount + 1));
      allow delete: if request.auth != null && resource.data.creatorId == request.auth.uid;
    }

    match /game-rooms/{roomId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Only the host can update the room
      allow update: if isRoomHost(roomId);
      allow delete: if isRoomHost(roomId);
    }

    match /users/{userId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
      
      // Allow user to update their own data, 
      // OR allow a room host to update the data of players in their room.
      allow update: if isOwner(userId) || 
                     (exists(/databases/$(database)/documents/game-rooms/$(request.query.roomId)) && 
                      isRoomHost(request.query.roomId) && 
                      get(/databases/$(database)/documents/game-rooms/$(request.query.roomId)).data.playerUIDs.hasAny([userId]));
                      
      allow delete: if isOwner(userId);

      // Only the user can manage their own subcollections
      match /playedGameSets/{playedGameSetId} {
        allow read: if request.auth != null;
        allow write: if isOwner(userId);
      }
      match /incorrect-answers/{incorrectAnswerId} {
          allow read, write: if isOwner(userId);
      }
    }
  }
}
